.IFJcode24
# MAIN PROGRAM
 
LABEL $MAIN
#  GLOBAL VARIABLES 
DEFVAR GF@$statValue
DEFVAR GF@$operand1
DEFVAR GF@$operand2
DEFVAR GF@$tmpValue
# # MAIN PROGRAM

 
CREATEFRAME
PUSHFRAME
DEFVAR GF@x10
DEFVAR GF@$$x10
MOVE GF@$$x10 bool@true
MOVE GF@x10 nil@nil
DEFVAR GF@x21
DEFVAR GF@$$x21
MOVE GF@$$x21 bool@false
DEFVAR GF@x2
DEFVAR GF@$$x2
MOVE GF@$$x2 bool@false
DEFVAR GF@y3
DEFVAR GF@$$y3
MOVE GF@$$y3 bool@true
MOVE GF@y3 nil@nil
PUSHS nil@nil
POPS GF@x10
PUSHS int@5
POPS GF@x21
PUSHS GF@x10
PUSHS GF@x21
CALL $doubleQuest
POPS GF@x2
PUSHS string@\010
PUSHS GF@x2
PUSHS string@x\032je:\032
PUSHS int@3
CALL write
PUSHS int@10
POPS GF@x10
PUSHS int@5
POPS GF@x21
PUSHS GF@x10
PUSHS GF@x21
CALL $doubleQuest
POPS GF@x2
PUSHS string@\010
PUSHS GF@x2
PUSHS string@x\032je:\032
PUSHS int@3
CALL write
EXIT int@0
# # BUILTWRITE (int count, ...) 
LABEL write
CREATEFRAME
DEFVAR TF@actualValue
DEFVAR TF@counter
POPS TF@counter
JUMPIFEQ $$writeEnd TF@counter int@0
LABEL $$writeCycle
POPS TF@actualValue
WRITE TF@actualValue
SUB TF@counter TF@counter int@1
JUMPIFNEQ $$writeCycle TF@counter int@0
RETURN
LABEL readInt
CREATEFRAME
DEFVAR TF@integer
READ TF@integer int
PUSHS TF@integer
RETURN
LABEL readString
CREATEFRAME
DEFVAR TF@string
READ TF@string string
PUSHS TF@string
RETURN
LABEL readDouble
CREATEFRAME
DEFVAR TF@double
READ TF@double float
PUSHS TF@double
RETURN
#  BUILT-Int2Double(int term) -> Double 
LABEL Int2Double
INT2FLOATS
RETURN
#  BUILT-Double2Int(int term) -> Int 
LABEL Double2Int
FLOAT2INTS
RETURN
#  BUILT - LENGTH(string str) -> Int 
LABEL length
CREATEFRAME
DEFVAR TF@lengthNum
DEFVAR TF@inputString
POPS TF@inputString
STRLEN TF@lengthNum TF@inputString
PUSHS TF@lengthNum
RETURN
LABEL substring
CREATEFRAME
DEFVAR TF@inputString
DEFVAR TF@startIndex
DEFVAR TF@endIndex
POPS TF@inputString
POPS TF@startIndex
POPS TF@endIndex
DEFVAR TF@resultString
MOVE TF@resultString string@
DEFVAR TF@actualChar
DEFVAR TF@isStartGtEnd
JUMP $$subStringCheckCond
LABEL $$subStringLoop
JUMPIFEQ $$subStringEnd TF@startIndex TF@endIndex
GETCHAR TF@actualChar TF@inputString TF@startIndex # char c = input[start]
CONCAT TF@resultString TF@resultString TF@actualChar
ADD TF@startIndex TF@startIndex int@1
JUMP $$subStringLoop
LABEL $$subStringCheckCond
DEFVAR TF@strLen
DEFVAR TF@compResult
STRLEN TF@strLen TF@inputString
LT TF@compResult TF@startIndex int@0
JUMPIFEQ $$subStringNil TF@compResult bool@true
LT TF@compResult TF@endIndex int@0
JUMPIFEQ $$subStringNil TF@compResult bool@true
GT TF@compResult TF@startIndex TF@endIndex
JUMPIFEQ $$subStringNil TF@compResult bool@true
JUMPIFEQ $$subStringNil TF@startIndex TF@strLen
GT TF@compResult TF@startIndex TF@strLen
JUMPIFEQ $$subStringNil TF@compResult bool@true
GT TF@compResult TF@endIndex TF@strLen
JUMPIFEQ $$subStringNil TF@compResult bool@true
JUMP $$subStringLoop
LABEL $$subStringEnd
PUSHS TF@resultString
RETURN
LABEL $$subStringNil
MOVE TF@resultString nil@nil
PUSHS TF@resultString
RETURN
#  BUILT ORD (string c) -> Int 
LABEL ord
CREATEFRAME
DEFVAR TF@strLen
DEFVAR TF@inputString
DEFVAR TF@asciiValue
POPS TF@inputString
STRLEN TF@strLen TF@inputString
JUMPIFEQ $$ord0 TF@strLen int@0
STRI2INT TF@asciiValue TF@inputString int@0
PUSHS TF@asciiValue
RETURN
LABEL $$ord0
PUSHS int@0
RETURN
#  BUILT CHR (int number) -> String 
LABEL chr
CREATEFRAME
DEFVAR TF@inputNum
DEFVAR TF@outputChar
POPS TF@inputNum
INT2CHAR TF@outputChar TF@inputNum
PUSHS TF@outputChar
RETURN
#  CHECKNIL(bool canBeNill, int/double/string value) 
LABEL $$checkNil
CREATEFRAME
DEFVAR TF@canBeNill
POPS TF@canBeNill
#  pokud nemuze byt nil, jdu zkontrolovat hodnotu promenne 
JUMPIFEQ $$checkInputValue TF@canBeNill bool@false
RETURN
# Zkontroluj hodnotu vstupu 
LABEL $$checkInputValue
DEFVAR TF@inputValue
POPS TF@inputValue
JUMPIFEQ $$cantBeNillError TF@inputValue nil@nil
RETURN
# CHYBA, ukonci program 
LABEL $$cantBeNillError
WRITE string@ERROR\032UNEXPECTED\032NIL
EXIT int@7
LABEL $doubleQuest
POPS GF@$operand2
POPS GF@$operand1
JUMPIFEQ $isNil GF@$operand1 nil@nil
# Levy operand neni nil, davam na zasobnik a konec 
PUSHS GF@$operand1
RETURN
LABEL $isNil
JUMPIFEQ $isNilError GF@$operand2 nil@nil
PUSHS GF@$operand2
RETURN
# Chyba: pravy operand nemuze byt nil 
LABEL $isNilError
EXIT int@7
